def str2mode(s):
    if s == '0':
        return lambda p: MEM[p]
    else:
        return lambda p: p

def str2op(s):
    if s == '01':
        return (2, 1), lambda p: (p[0] + p[1], None)
    elif s == '02':
        return (2, 1), lambda p: (p[0] * p[1], None)
    elif s == '03':
        return (0, 1), lambda p: (int(input()), None)
    elif s == '04':
        return (1, 0), lambda p: (print(p[0]), None)
    elif s == '05':
        return (2, 0), lambda p: (None, p[1] if p[0] else None)
    elif s == '06':
        return (2, 0), lambda p: (None, None if p[0] else p[1])
    elif s == '07':
        return (2, 1), lambda p: (1 if p[0] < p[1] else 0, None)
    elif s == '08':
        return (2, 1), lambda p: (1 if p[0] == p[1] else 0, None)


def decode(mem):
    mem = '000000' + str(mem)
    op = str2op(mem[-2:])
    modes = list(map(str2mode, mem[-3:-(3 + op[0][0]):-1]))
    return op, modes


def step():
    global pc
    op, modes = decode(MEM[pc])
    pc += 1
    (pn, an), istr = op
    mem = MEM[pc: pc + pn]
    vals = [m(v) for m, v in zip(modes, mem)]
    addr = MEM[pc + pn: pc + pn + an]
    res, npc = istr(vals)
    if addr: MEM[addr[0]] = res
    pc = npc if npc else pc + pn + an

def run(PRG):
    global pc, MEM
    MEM = PRG[:]
    pc = 0
    while MEM[pc] != 99:
        step()

TEST = [3,225,1,225,6,6,1100,1,238,225,104,0,1102,27,28,225,1,113,14,224,1001,224,-34,224,4,224,102,8,223,223,101,7,224,224,1,224,223,223,1102,52,34,224,101,-1768,224,224,4,224,1002,223,8,223,101,6,224,224,1,223,224,223,1002,187,14,224,1001,224,-126,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1102,54,74,225,1101,75,66,225,101,20,161,224,101,-54,224,224,4,224,1002,223,8,223,1001,224,7,224,1,224,223,223,1101,6,30,225,2,88,84,224,101,-4884,224,224,4,224,1002,223,8,223,101,2,224,224,1,224,223,223,1001,214,55,224,1001,224,-89,224,4,224,102,8,223,223,1001,224,4,224,1,224,223,223,1101,34,69,225,1101,45,67,224,101,-112,224,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1102,9,81,225,102,81,218,224,101,-7290,224,224,4,224,1002,223,8,223,101,5,224,224,1,223,224,223,1101,84,34,225,1102,94,90,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1007,677,677,224,102,2,223,223,1005,224,329,101,1,223,223,1108,226,677,224,1002,223,2,223,1005,224,344,101,1,223,223,1008,677,677,224,102,2,223,223,1005,224,359,101,1,223,223,8,226,677,224,1002,223,2,223,1006,224,374,101,1,223,223,108,226,677,224,1002,223,2,223,1006,224,389,1001,223,1,223,1107,226,677,224,102,2,223,223,1005,224,404,1001,223,1,223,7,226,677,224,1002,223,2,223,1005,224,419,101,1,223,223,1107,677,226,224,102,2,223,223,1006,224,434,1001,223,1,223,1107,226,226,224,1002,223,2,223,1006,224,449,101,1,223,223,1108,226,226,224,1002,223,2,223,1005,224,464,101,1,223,223,8,677,226,224,102,2,223,223,1005,224,479,101,1,223,223,8,226,226,224,1002,223,2,223,1006,224,494,1001,223,1,223,1007,226,677,224,1002,223,2,223,1006,224,509,1001,223,1,223,108,226,226,224,1002,223,2,223,1006,224,524,1001,223,1,223,1108,677,226,224,102,2,223,223,1006,224,539,101,1,223,223,1008,677,226,224,102,2,223,223,1006,224,554,101,1,223,223,107,226,677,224,1002,223,2,223,1006,224,569,101,1,223,223,107,677,677,224,102,2,223,223,1006,224,584,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,599,101,1,223,223,1008,226,226,224,1002,223,2,223,1005,224,614,1001,223,1,223,107,226,226,224,1002,223,2,223,1005,224,629,101,1,223,223,7,226,226,224,102,2,223,223,1006,224,644,1001,223,1,223,1007,226,226,224,102,2,223,223,1006,224,659,101,1,223,223,108,677,677,224,102,2,223,223,1005,224,674,1001,223,1,223,4,223,99,226]

run(TEST)